option
{
	uint ShadowMapCascadeCount = 8;
}

include Atema.GBufferRead;

struct PhongDirectionalData
{
	vec3f cameraPosition;
	vec3f lightDirection;
	vec3f lightColor;
	float ambientStrength;
}

struct ShadowData
{
	mat4f view;
	mat4f cascadeViewProj[ShadowMapCascadeCount];
	float cascadeDepth[ShadowMapCascadeCount];
	float cascadeDepthBias[ShadowMapCascadeCount];
}

external
{
	[set(0), binding(4)] sampler2DArray shadowMap;
	
	[set(1), binding(0)] ShadowData shadowData;
	
	[set(1), binding(1)] PhongDirectionalData phongData;
}

[stage(vertex)]
input
{
	[location(0)] vec3f inPosition;
	[location(1)] vec2f inTexCoords;
}

[stage(vertex)]
output
{
	[location(0)] vec2f outTexCoords;
}

[entry(vertex)]
void main()
{
	vec4f position = vec4f(inPosition, 1.0);
	
	outTexCoords = inTexCoords;
	
	setVertexPosition(position);
}

[stage(fragment)]
input
{
	[location(0)] vec2f inTexCoords;
}

[stage(fragment)]
output
{
	[location(0)] vec4f outColor;
}

vec2f poissonDisk[16] = vec2f[]( 
   vec2f( -0.94201624, -0.39906216 ), 
   vec2f( 0.94558609, -0.76890725 ), 
   vec2f( -0.094184101, -0.92938870 ), 
   vec2f( 0.34495938, 0.29387760 ), 
   vec2f( -0.91588581, 0.45771432 ), 
   vec2f( -0.81544232, -0.87912464 ), 
   vec2f( -0.38277543, 0.27676845 ), 
   vec2f( 0.97484398, 0.75648379 ), 
   vec2f( 0.44323325, -0.97511554 ), 
   vec2f( 0.53742981, -0.47373420 ), 
   vec2f( -0.26496911, -0.41893023 ), 
   vec2f( 0.79197514, 0.19090188 ), 
   vec2f( -0.24188840, 0.99706507 ), 
   vec2f( -0.81409955, 0.91437590 ), 
   vec2f( 0.19984126, 0.78641367 ), 
   vec2f( 0.14383161, -0.14100790 ) 
);

float random(vec3f seed, int i)
{
	vec4f seed4 = vec4f(seed,i);
	
	float dotProduct = dot(seed4, vec4f(12.9898,78.233,45.164,94.673));
	
	return fract(sin(dotProduct) * 43758.5453);
}

float sampleVisibility(vec2f uv, uint cascadeIndex, float shadowZ)
{
	float shadowMapZ = sample(shadowMap, vec3f(uv, cascadeIndex)).r;
	
	if (shadowMapZ < shadowZ)
		return 0.0;
	
	return 1.0;
}

float sampleVisibilityPCF(vec2f uv, uint cascadeIndex, float shadowZ)
{
	float scale = 0.1;
	
	vec2i texDim = textureSize(shadowMap, 0).xy;
	float dx = scale / float(texDim.x);
	float dy = scale / float(texDim.y);

	float result = 0.0;
	int count = 0;
	int range = 8;
	
	for (int x = -range; x <= range; x++)
	{
		for (int y = -range; y <= range; y++)
		{
			result = result + sampleVisibility(uv + vec2(dx*x, dy*y), cascadeIndex, shadowZ);
			count++;
		}
	}
	
	return result / count;
}

float sampleVisibilityPoissonPCF(vec2f uv, uint cascadeIndex, float shadowZ)
{
	float scale = 0.4;
	
	vec2i texDim = textureSize(shadowMap, 0).xy;
	float dx = scale / float(texDim.x);
	float dy = scale / float(texDim.y);

	float result = 0.0;
	int count = 0;
	int range = 4;
	
	vec3f pos = atGBufferReadPosition(inTexCoords);
	
	for (int x = -range; x <= range; x++)
	{
		for (int y = -range; y <= range; y++)
		{
			int index = int(int(16.0 * random(floor(pos * 1000.0), x + y * 100)) % 16);
		
			vec2f offset = poissonDisk[index] / 200;
			offset = offset * scale * 0.0;
			
			result = result + sampleVisibility(uv + vec2(dx*x, dy*y) + offset, cascadeIndex, shadowZ);
			count++;
		}
	}
	
	return result / count;
}

float getVisibility(float angle)
{
	vec3f pos = atGBufferReadPosition(inTexCoords);
	
	vec4f posViewSpace = (shadowData.view * vec4f(pos, 1.0));
	
	uint cascadeIndex = uint(ShadowMapCascadeCount - 1);
	for(uint i = uint(0); i < uint(ShadowMapCascadeCount); i++)
	{
		if(-posViewSpace.z < shadowData.cascadeDepth[i])
		{	
			cascadeIndex = i;
			break;
		}
	}
	
	float cascadePoissonStrengths[8] = float[](2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0);
	
	float cascadePoissonStrength = cascadePoissonStrengths[cascadeIndex];
	
	float cascadeBias = clamp(shadowData.cascadeDepthBias[cascadeIndex] * tan(angle), 0.0, 0.5);
	
	vec4f shadowCoord = (shadowData.cascadeViewProj[cascadeIndex] * vec4f(pos, 1.0));
	shadowCoord.z = clamp(shadowCoord.z, -1.0, 1.0);
	
	vec2f shadowMapUV = shadowCoord.xy * 0.5 + 0.5;
	float shadowZ = shadowCoord.z - cascadeBias;
	
	return sampleVisibility(shadowMapUV, cascadeIndex, shadowZ);
}

[entry(fragment)]
void main()
{
	vec3f pos = atGBufferReadPosition(inTexCoords);
	vec3f normal = atGBufferReadNormal(inTexCoords);
	vec3f color = atGBufferReadAlbedo(inTexCoords);
	float ao = atGBufferReadAO(inTexCoords);
	float metalness = atGBufferReadMetalness(inTexCoords);
	int roughness = int(atGBufferReadRoughness(inTexCoords) * 255.0);
	vec3f emissiveColor = atGBufferReadEmissive(inTexCoords);
	
	vec3f inverseLightDir = -normalize(phongData.lightDirection);
	
	vec3f ambientColor = phongData.ambientStrength * phongData.lightColor * ao;
	
	float cosTheta = dot(normal, inverseLightDir);
	
	float diffuseFactor = max(cosTheta, 0.0);
	
	vec3f diffuseColor = diffuseFactor * phongData.lightColor;
	
	vec3f viewDir = normalize(phongData.cameraPosition - pos);
	
	vec3f reflectDir = reflect(-inverseLightDir, normal);
	
	float specularFactor = clamp(pow(max(dot(viewDir, reflectDir), 0.0), roughness), 0.0, 1.0);
	
	vec3f specularColor = specularFactor * metalness * phongData.lightColor;
	
	float visibility = getVisibility(acos(cosTheta));
	
	vec3f finalColor = (ambientColor + visibility * (diffuseColor + specularColor)) * color.rgb;
	finalColor = finalColor + emissiveColor;
	
	outColor = vec4f(finalColor, 1.0);
	
	
	
	vec3f colors[4] = vec3f[](vec3f(0, 1, 0), vec3f(0, 0, 1), vec3f(1, 1, 0), vec3f(1, 0, 0));
	
	vec4f posViewSpace = (shadowData.view * vec4f(pos, 1.0));
	
	uint cascadeIndex = uint(ShadowMapCascadeCount - 1);
	for(uint i = uint(0); i < uint(ShadowMapCascadeCount); i++)
	{
		if(-posViewSpace.z < shadowData.cascadeDepth[i])
		{	
			cascadeIndex = i;
			break;
		}
	}
	
	outColor = vec4f(finalColor + colors[int(cascadeIndex % 4)] * 0.15, 1.0);
	outColor = vec4f(finalColor, 1.0);
}
