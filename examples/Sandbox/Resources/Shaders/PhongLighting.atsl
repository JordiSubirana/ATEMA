struct PassData
{
	vec4f lightPosition;
	vec4f lightColor;
	float ambientStrength;
}

external
{
	[set(0), binding(0)] sampler2Df gbufferPosition;
	[set(0), binding(1)] sampler2Df gbufferNormal;
	[set(0), binding(2)] sampler2Df gbufferColor;
	[set(0), binding(3)] sampler2Df gbufferAO;
	[set(0), binding(4)] sampler2Df gbufferEmissive;
	[set(0), binding(5)] sampler2Df gbufferMetalness;
	[set(0), binding(6)] sampler2Df gbufferRoughness;
	
	[set(1), binding(0)] PassData passData;
}

[stage(fragment)]
input
{
	[location(0)] vec2f inTexCoord;
}

[stage(fragment)]
output
{
	[location(0)] vec4f outColor;
}

[entry(fragment)]
void main()
{
	vec3f pos = sample(gbufferPosition, inTexCoord).xyz;
	vec3f normal = sample(gbufferNormal, inTexCoord).xyz;
	vec4f color = sample(gbufferColor, inTexCoord);
	
	vec3f ambientColor = passData.ambientStrength * passData.lightColor.xyz;
	
	vec3f lightDir = normalize(passData.lightPosition.xyz - pos);
	
	float diffuseFactor = max(dot(normal, lightDir), 0.0);
	
	vec3f diffuseColor = diffuseFactor * passData.lightColor.xyz;
	
	outColor = vec4f((ambientColor + diffuseColor) * color.rgb, color.a);
}
